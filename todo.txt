
Blatantly influenced by: 
	https://github.com/wting/autojump (https://olivierlacan.com/posts/cd-is-wasting-your-time/)
	https://github.com/rupa/z

fix bug
- try `jd 1` during repeat timeout: throws index exception

new feature
- while `..\<key>` will get you to a match on <key> in the parent dir
- how about `..<key>` gets you to a match on the first parent in the current path?

improvement: should -delete always show the new list? 
  since the list changed, the ordinals changed. 
  if you want to delete several items, you need to `jl` again to see the list

when arg starting with `-` is found
	- check for existing directory, if found emit warning, treat as dir

new switch "-rtime n"
- sets the repeat timeout to n seconds (persisted in user data)
new switch "-ftime n"
- sets the flyover timeout to n seconds (persisted in user data)

for windows environments, check current and target drive letters. 
	If they differ, output help
	Can we send 2 commands?

!!! Check on spaces... may need to quote the resulting CD command.
- also, add outgoing CD command to verbose output

only purge flyovers when actually changing directories

modify hook script to delimit on ; and run all commands instead of setting result to env var

add drive letter segment to path regex, issue multiple commands:
	'cd {path}'
	'{drive letter}:' (to switch drives)

reranking
	when max rank hits 100, recompute all: rank/99
	delete ranks under 1

extra commands:

store help suppression by command
	`jd -q l` (quiets jump list help)

research exe packaging
- https://stackoverflow.com/questions/44074121/build-net-core-console-application-to-output-an-exe

================================================================================
	DONE
================================================================================
extra commands:
	-c[lear] clears the history
	-s[tats] show history with jump counts, etc.
	-v[erbose] display details on what it's doing to standard error stout reserved for return value 

when arg contains environment separator (e.g. / or \)
	set search context to relative location and search there
		jd "..\x"
			context is ".\..\"; search "x"
		jd "\x" context is "\" (root); search "x"

don't save backref only (i.e. "..\*n")

fuzzy logic behaviors
	- save possible matches (both previous used matched entries and matched local dirs)
	and the one used (first)
	- when next called with save arg, cd to next in previous set; update last used
	- maybe emit the set list with numbers on entries and indicator showing which entry is active

when '.' is entered, save/update the current location (for cases where you CDed in but want to remember it)
	- allow optional second as key, otherwise use full directory name

allow second argument as key alias?
	- jd somelongdirectoryname shortname

search order precendence:
	previous entries that match arg
	sub dirs that START with arg
	sub dirs that CONTATIN arg

change program output to be full command(s), change hook script to just process that command

other ideas:
	"ji" (i.e. jump into) pushd but with jumpDir searching
	"jo" (i.e. jump outof) popd

disregard jumped over dirs
	save use date stamp with entry
	remove entries less than 10 seconds old
